version: "3.3"

services:
  order_db:
    image: postgres
    container_name: order-db
    volumes:
      - ./order/migrations/create_order_tables.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=order_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    env_file:
      - ./order/.local.env
    networks:
      - online
    ports:
      - "5432:5432"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
  billing_db:
    image: postgres
    container_name: billing-db
    volumes:
      - ./billing/migrations/create_tables.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=billing_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    env_file:
      - ./billing/.local.env
    networks:
      - online
    ports:
      - "5433:5432"
  delivery_db:
    image: postgres
    container_name: delivery-db
    volumes:
      - ./delivery/migrations/create_tables.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=delivery_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    env_file:
      - ./delivery/.local.env
    networks:
      - online
    ports:
      - "5434:5432"
  inventory_db:
    image: postgres
    container_name: inventory-db
    volumes:
      - ./inventory/migrations/create_tables.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=inventory_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    env_file:
      - ./inventory/.local.env
    networks:
      - online
    ports:
      - "5435:5432"
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - online
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - online
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - online
  kafka-connect:
    image: ivakhotin/debezium-connector:1.2.1
    container_name: kafka-connect
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      REST_PORT: 8083
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      OFFSET_STORAGE_PARTITIONS: 3
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_TOPIC: docker-connect-status
      STATUS_STORAGE_PARTITIONS: 3
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      LOG4J_ROOT_LOGLEVEL: INFO
      LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      PLUGIN_PATH: "/usr/share/java"
    networks:
      - online
  mysql:
    container_name: temporal-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    image: mysql:5.7
    networks:
      - online
    ports:
      - 3306:3306
  temporal:
    container_name: temporal
    depends_on:
      - mysql
    environment:
      - DB=mysql
      - DB_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PWD=root
      - MYSQL_SEEDS=mysql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/dynamicconfig.yaml
    image: temporalio/auto-setup:1.12.3
    networks:
      - online
    ports:
      - 7233:7233
    volumes:
      - ./temporal:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.12.3
    networks:
      - online
    stdin_open: true
    tty: true
  temporal-web:
    container_name: temporal-web
    depends_on:
      - temporal
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    image: temporalio/web:1.12.0
    networks:
      - online
    ports:
      - 8088:8088
  user_db:
    image: postgres
    container_name: user-db
    volumes:
      - ./user/migrations/create_user_tables.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    env_file:
      - ./user/.local.env
    networks:
      - online
    ports:
      - "5436:5432"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
  redis:
    image: "redis:alpine"
    container_name: session-storage
    ports:
      - "6379:6379"

networks:
  online:
    driver: bridge