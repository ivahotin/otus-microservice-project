{
	"info": {
		"_postman_id": "4480605c-8946-478d-a6b6-55391d8cac66",
		"name": "Test saga",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should add item to inventory\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"itemId\", jsonData.itemId);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Наушники\",\n    \"description\": \"Очень качественные наушники\",\n    \"quantity\": 50,\n    \"price\": 50\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/items",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add money to account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should add money to user's account\", function() {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let uuid = require('uuid');",
							"let myUUID = uuid.v4();",
							"console.log(myUUID);",
							"pm.collectionVariables.set(\"idempotencyKey\", myUUID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					},
					{
						"key": "idempotency-key",
						"value": "{{idempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 50\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/payments/debits",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"payments",
						"debits"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get existing order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return list of orders\", function() {",
							"    pm.response.to.have.status(200);",
							"",
							"    let lastVersion = parseInt(pm.response.headers.get(\"ETag\").replace(/^\"(.*)\"$/, '$1')) + 1;",
							"    pm.collectionVariables.set(\"lastVersion\", lastVersion);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Place order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should place an order\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"orderId\", jsonData.orderId);",
							"});",
							"",
							"setTimeout(() => {}, 10000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					},
					{
						"key": "If-Match",
						"value": "{{lastVersion}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"consumerId\": \"{{consumerId}}\",\n  \"items\": [\n    {\n      \"itemId\": \"{{itemId}}\",\n      \"title\": \"Самокат\",\n      \"description\": \"Самый лучший самокат\",\n      \"quantity\": 1,\n      \"price\": 50\n    }\n  ],\n  \"delivery\": {\n    \"type\": \"self-delivery\",\n    \"city\": \"Moscow\",\n    \"datetime\": \"2021-09-09T12:00:00\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order should be successfully processed\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"status\"]).to.eql(\"PROCESSED\");",
							"    pm.expect(jsonData[\"deliveryId\"]).not.equal(null);",
							"    pm.expect(jsonData[\"reservationId\"]).not.equal(null);",
							"    pm.expect(jsonData[\"paymentId\"]).not.equal(null);",
							"",
							"    pm.collectionVariables.set(\"deliveryId\", jsonData.deliveryId);",
							"    pm.collectionVariables.set(\"reservationId\", jsonData.reservationId);",
							"    pm.collectionVariables.set(\"paymentId\", jsonData.paymentId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/orders/{{orderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check delivery",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delivery should be created\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "http://{{baseUrl}}/deliveries/{{deliveryId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"deliveries",
						"{{deliveryId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check payments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check payments\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"amount\"]).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/payments",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check reservations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check reservation\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    let reservationId = pm.collectionVariables.get(\"reservationId\");",
							"    let reservation = jsonData.filter(reservation => reservation.id == reservationId)[0];",
							"",
							"    pm.expect(reservation[\"isCancelled\"]).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/items/reservations",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"reservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get existing orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return list of orders\", function() {",
							"    pm.response.to.have.status(200);",
							"",
							"    let lastVersion = parseInt(pm.response.headers.get(\"ETag\").replace(/^\"(.*)\"$/, '$1')) + 1;",
							"    pm.collectionVariables.set(\"lastVersion\", lastVersion);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Place one more order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should place an order\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"failedOrderId\", jsonData.orderId);",
							"});",
							"",
							"setTimeout(() => {}, 10000); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					},
					{
						"key": "If-Match",
						"value": "{{lastVersion}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"consumerId\": \"{{consumerId}}\",\n  \"items\": [\n    {\n      \"itemId\": \"{{itemId}}\",\n      \"title\": \"Самокат\",\n      \"description\": \"Самый лучший самокат\",\n      \"quantity\": 1,\n      \"price\": 50\n    }\n  ],\n  \"delivery\": {\n    \"type\": \"self-delivery\",\n    \"city\": \"Moscow\",\n    \"datetime\": \"2021-09-09T12:00:00\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/orders",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Order should be successfully processed\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"status\"]).to.eql(\"FAILED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/orders/{{failedOrderId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"{{failedOrderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check reservations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check reservation\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    let orderId = pm.collectionVariables.get(\"failedOrderId\");",
							"    let isCancelled = jsonData.filter(reservation => reservation.idempotencyKey == orderId).length > 0;",
							"",
							"    pm.expect(isCancelled).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-user-id",
						"value": "{{consumerId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/items/reservations",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"reservations"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "consumerId",
			"value": "79335c15-8eee-4cf7-8387-1ba13de75584"
		},
		{
			"key": "itemId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "deliveryId",
			"value": ""
		},
		{
			"key": "reservationId",
			"value": ""
		},
		{
			"key": "paymentId",
			"value": ""
		},
		{
			"key": "failedOrderId",
			"value": ""
		},
		{
			"key": "idempotencyKey",
			"value": ""
		},
		{
			"key": "lastVersion",
			"value": ""
		}
	]
}