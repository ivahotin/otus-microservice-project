{{- if $.Values.server.enabled }}
{{- if .Values.schema.setup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: temporal-schema-setup
  labels:
    app.kubernetes.io/name: temporal
    helm.sh/chart: temporal-0.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: 1.12.3
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: temporal
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 100
  template:
    metadata:
      name: temporal-schema-setup
      labels:
        app.kubernetes.io/name: temporal
        helm.sh/chart: temporal-0.12.3
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/version: 1.12.3
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: temporal
    spec:
      restartPolicy: "OnFailure"
      initContainers:
        []
      containers:
        - name: default-schema
          image: "temporalio/admin-tools:1.12.2"
          imagePullPolicy: IfNotPresent
          command: ["temporal-sql-tool", "setup-schema", "-v", "0.0"]
          env:
            - name: SQL_PLUGIN
              value: "postgres"
            - name: SQL_HOST
              value: "temporal-db.temporalio.svc.cluster.local"
            - name: SQL_PORT
              value: "5432"
            - name: SQL_USER
              value: "postgres"
            - name: SQL_PASSWORD
              value: "postgres"
            - name: SQL_DATABASE
              value: "temporal"
        - name: visibility-schema
          image: "temporalio/admin-tools:1.12.2"
          imagePullPolicy: IfNotPresent
          command: ["temporal-sql-tool", "setup-schema", "-v", "0.0"]
          env:
            - name: SQL_PLUGIN
              value: "postgres"
            - name: SQL_HOST
              value: "temporal-db.temporalio.svc.cluster.local"
            - name: SQL_PORT
              value: "5432"
            - name: SQL_USER
              value: "postgres"
            - name: SQL_PASSWORD
              value: "postgres"
            - name: SQL_DATABASE
              value: "temporal_visibility"
---
{{- end }}
{{- if .Values.schema.update.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: temporal-schema-update
  labels:
    app.kubernetes.io/name: temporal
    helm.sh/chart: temporal-0.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: 1.12.3
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: temporal
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 100
  template:
    metadata:
      name: temporal-schema-update
      labels:
        app.kubernetes.io/name: temporal
        helm.sh/chart: temporal-0.12.3
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/version: 1.12.3
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: temporal
    spec:
      restartPolicy: "OnFailure"
      initContainers:
        []
      containers:
        - name: default-schema
          image: "temporalio/admin-tools:1.12.2"
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'temporal-sql-tool update -schema-dir schema/postgresql/v96/temporal/versioned']
          env:
            - name: SQL_PLUGIN
              value: "postgres"
            - name: SQL_HOST
              value: "temporal-db.temporalio.svc.cluster.local"
            - name: SQL_PORT
              value: "5432"
            - name: SQL_USER
              value: "postgres"
            - name: SQL_PASSWORD
              value: "postgres"
            - name: SQL_DATABASE
              value: "temporal"
        - name: visibility-schema
          image: "temporalio/admin-tools:1.12.2"
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'temporal-sql-tool update -schema-dir schema/postgresql/v96/temporal/versioned']
          env:
            - name: SQL_PLUGIN
              value: "postgres"
            - name: SQL_HOST
              value: "temporal-db.temporalio.svc.cluster.local"
            - name: SQL_PORT
              value: "5432"
            - name: SQL_USER
              value: "postgres"
            - name: SQL_PASSWORD
              value: "postgres"
            - name: SQL_DATABASE
              value: "temporal_visibility"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: temporal-namespace-setup
  labels:
    app.kubernetes.io/name: temporal
    helm.sh/chart: temporal-0.12.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: 1.12.3
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: temporal
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  backoffLimit: 200
  template:
    metadata:
      name: temporal-namespace-setup
      labels:
        app.kubernetes.io/name: temporal
        helm.sh/chart: temporal-0.12.3
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/version: 1.12.3
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: temporal
    spec:
      restartPolicy: "OnFailure"
      initContainers:
        []
      containers:
        - name: order-namespace
          image: "temporalio/admin-tools:1.12.2"
          imagePullPolicy: IfNotPresent
          command: ["tctl", "--namespace", "order", "namespace", "re"]
          env:
            - name: TEMPORAL_CLI_ADDRESS
              value: "temporalio-frontend.temporalio.svc.cluster.local:7233"
---
{{- end }}
{{- if or $.Values.elasticsearch.enabled $.Values.elasticsearch.external }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "temporal.componentname" (list . "es-index-setup") }}
  labels:
    app.kubernetes.io/name: {{ include "temporal.name" . }}
    helm.sh/chart: {{ include "temporal.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: {{ .Chart.Name }}
  annotations:
    {{- if .Values.elasticsearch.external }}
    "helm.sh/hook": pre-install
    {{- else }}
    "helm.sh/hook": post-install
    {{- end }}
    "helm.sh/hook-weight": "0"
    {{- if not .Values.debug }}
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    {{- end }}
spec:
  backoffLimit: {{ .Values.schema.setup.backoffLimit }}
  template:
    metadata:
      name: {{ include "temporal.componentname" (list . "es-index-setup") }}
      labels:
        app.kubernetes.io/name: {{ include "temporal.name" . }}
        helm.sh/chart: {{ include "temporal.chart" . }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" }}
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: {{ .Chart.Name }}
    spec:
      restartPolicy: "OnFailure"
      initContainers:
        - name: check-elasticsearch-service
          image: busybox
          command: ['sh', '-c', 'until nslookup {{ .Values.elasticsearch.host }}; do echo waiting for elasticsearch service; sleep 1; done;']
        - name: check-elasticsearch
          image: "{{ .Values.admintools.image.repository }}:{{ .Values.admintools.image.tag }}"
          imagePullPolicy: {{ $.Values.admintools.image.pullPolicy }}
          command: ['sh', '-c', 'until curl --silent --fail --user {{ .Values.elasticsearch.username }}:{{ .Values.elasticsearch.password }} {{ .Values.elasticsearch.scheme }}://{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }} 2>&1 > /dev/null; do echo waiting for elasticsearch to start; sleep 1; done;']
      containers:
        - name: create-elasticsearch-index
          image: "{{ $.Values.admintools.image.repository }}:{{ $.Values.admintools.image.tag }}"
          imagePullPolicy: {{ $.Values.admintools.image.pullPolicy }}
          command: ['sh', '-c']
          args:
            - 'curl -X PUT --fail --user {{ .Values.elasticsearch.username }}:{{ .Values.elasticsearch.password }} {{ .Values.elasticsearch.scheme }}://{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}/_template/temporal_visibility_v1_template -H "Content-Type: application/json" --data-binary "@schema/elasticsearch/visibility/index_template_{{ .Values.elasticsearch.version }}.json" 2>&1;
              curl -X PUT --fail --user {{ .Values.elasticsearch.username }}:{{ .Values.elasticsearch.password }} {{ .Values.elasticsearch.scheme }}://{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}/{{ .Values.elasticsearch.visibilityIndex }} 2>&1;'
{{- end }}
{{- end }}
